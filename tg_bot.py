import asyncio
from datetime import datetime
import os

from aiogram import Bot, Dispatcher, executor, filters, types
from dotenv import load_dotenv
from loguru import logger
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from database import DataBasePostgres
import buttons as btn
from quizdata import Quiz
from dates import Date


WEBINAR_DATE = datetime.strptime("2023 3 23 20:00", "%Y %m %d %H:%M")  # —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–æ–¥, –º–µ—Å—è—Ü, –¥–µ–Ω—å, —á–∞—Å, –º–∏–Ω—É—Ç–∞
                                                                       # –Ω–∞–ø—Ä–∏–º–µ—Ä WEBINAR_DATE = datetime.strptime("2023 3 20 16:15", "%Y %m %d %H:%M")
load_dotenv()

scheduler = AsyncIOScheduler()

logger.add(
    "log",
    format='{time} {level} {message}',
    level='DEBUG',
    rotation='1 week',
    compression='zip'
)

bot = Bot(os.environ["TOKEN"])
dp = Dispatcher(bot)

bd = DataBasePostgres()
bd.create_table()

qz = Quiz()

dt = Date(WEBINAR_DATE)


@dp.message_handler(commands="start")
async def start(message: types.Message):
    id = message.from_id
    answer = (
        f"*–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!* üå∏\n\n"
        f"–†–∞–¥–∞ –≤–∞—à–µ–º—É –∏–Ω—Ç–µ—Ä–µ—Å—É –∫ –¢–∞—Ä–æ! –ü—Ä–∏–≥–ª–∞—à–∞—é –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–µ–±–∏–Ω–∞—Ä ¬´–û–±—É—á–µ–Ω–∏–µ –¢–∞—Ä–æ. –°–∏—Å—Ç–µ–º–∞ –†–∞–π–¥–µ—Ä–∞ –£—ç–π—Ç–∞¬ª.\n\n"
        f"*–í–µ–±–∏–Ω–∞—Ä —Å–æ—Å—Ç–æ–∏—Ç—Å—è {dt.get_webinar_date()} –ø–æ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏*\n"
        f"_–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –µ–≥–æ –Ω–∞—á–∞–ª–∞_\n\n"
        f"–ù–∞ –≤–µ–±–∏–Ω–∞—Ä–µ —è —Ä–∞—Å—Å–∫–∞–∂—É:\n"
        f"‚Ä¢ –≤—ã–±–æ—Ä –∫–æ–ª–æ–¥—ã üé¥\n"
        f"‚Ä¢ –æ—Ç–ª–∏—á–∏–µ —Å–∏—Å—Ç–µ–º —Ç–∞—Ä–æ –∏ –∫–æ–ª–æ–¥ üßê\n"
        f"‚Ä¢ –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —á–∏—Å—Ç–∏—Ç—å –∫–æ–ª–æ–¥—ã üî•\n"
        f"‚Ä¢ –∫–∞–∫ –≤–µ—Ä–Ω–æ —á–∏—Ç–∞—Ç—å –∫–∞—Ä—Ç—ã  üìñ\n"
        f"‚Ä¢ –∑–∞—á–µ–º –Ω—É–∂–Ω—ã –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã–µ –∫–∞—Ä—Ç—ã –∏ –Ω—É–∂–Ω—ã –ª–∏? üåö\n"
        f"‚Ä¢ –≥–¥–µ –∏—Å–∫–∞—Ç—å –ø–µ—Ä–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ üí∞\n"
        f"‚Ä¢ –ø–æ–¥–µ–ª—é—Å—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –Ω–∞—Ä–∞–±–æ—Ç–∫–∞–º–∏ üßô\n"
        f"‚Ä¢ –ø—Ä–æ–≤–µ–¥—ë–º –º–µ–¥–∏—Ç–∞—Ü–∏—é –Ω–∞ –ê—Ä–∫–∞–Ω —Ç–∞—Ä–æ üßò‚Äç‚ôÄÔ∏è\n\n"
        f"–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —Å–∏—Å—Ç–µ–º–∞ –£—ç–π—Ç–∞?\n"
        f"–î–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —è–≤–ª—è–µ—Ç—Å—è –∫–ª–∞—Å—Å–∏–∫–æ–π –∏ –æ–±—É—á–∏–≤—à–∏—Å—å –Ω–∞ —ç—Ç–æ–π –∫–æ–ª–æ–¥–µ, "
        f"–≤–∞–º –±—É–¥–µ—Ç –ª–µ–≥–∫–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∫–æ–ª–æ–¥–∞–º–∏.\n\n"
        f"–°—Ç–∞–≤—å –±—É–¥–∏–ª—å–Ω–∏–∫ ‚è∞ –∏ –≥–æ—Ç–æ–≤—å—Å—è –∫–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚úçÔ∏è, "
        f"–±—É–¥–µ—Ç –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω–æ–≥–æ! –î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä–µ! üå∑\n\n"
        f"–î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –ø–∏—à–∏—Ç–µ –ø–æ –ª—é–±–æ–º—É –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:\n\n"
        f"[Instagram](https://example.com)\n\n"
        f"[Telegram](https://t.me/test_borcheg_bot)\n\n"
    )

    if not bd.check_user_exist(id):
        try:
            bd.add_user(id)
        except Exception as error:
            logger.debug(f"{error}: id {id} (query add_user didn't work)")

    try:
        await bot.send_message(id, answer, parse_mode="Markdown", reply_markup=btn.menu_keyboard)
    except Exception as error:
        logger.debug(f"{error}: id {id} (user didn't get start message)")


@dp.message_handler(filters.Regexp(regexp=r'(–†|—Ä)–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'))
async def registration(message: types.Message):
    id = message.from_id

    try:
        if bd.check_reg_status(id) == "Registered":
            try:
                await bot.send_message(
                    id,
                    f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –∏–º–µ–Ω–µ–º {bd.get_name(id)}\n–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ?",
                    reply_markup=btn.change_reg_keyboard
                )
            except Exception as error:
                logger.debug(f"{error}: id {id} (user couldn't change his reg data)")

        else:
            try:
                bd.set_reg_status(id, "Set name")
            except Exception as error:
                logger.debug(f"{error}: id {id} (set_name query didn't work)")

            try:
                await bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º", reply_markup=types.ReplyKeyboardRemove())
            except Exception as error:
                logger.debug(f"{error}: id {id} (user couldn't set name)")

    except Exception as error:
        logger.debug(f"{error}: id {id} (check_reg_status query didn't work)")


@dp.message_handler()
async def message_handler(message: types.Message):
    """
    ================================
    ==    REGISTRATION HANDLER    ==
    ================================
    """

    id = message.from_id
    reg_answer = (
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä! üëç\n"
        f"–ñ–¥—É —Ç–µ–±—è {dt.get_webinar_date()}!\n"
        f"_–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç –∏ –Ω–∞ –ø–æ—á—Ç—É –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –µ–≥–æ –Ω–∞—á–∞–ª–∞, –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏!_"
    )

    try:
        if bd.check_reg_status(id) == "Set name":
            if len(message.text) > 50:
                try:
                    await message.reply("–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤!")
                except Exception as error:
                    logger.debug(f"{error}: id {id} (user didn't get valid set name message)")

            else:
                try:
                    bd.set_name(id, message.text)
                except Exception as error:
                    logger.debug(f"{error}: id {id} (query set_name didn't work)")

                try:
                    bd.set_reg_status(id, "Set email")
                except Exception as error:
                    logger.debug(f"{error}: id {id} (query set_reg_status didn't work)")

                try:
                    await bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É")
                except Exception as error:
                    logger.debug(f"{error}: id {id} (user couldn't set email)")

        elif bd.check_reg_status(id) == "Set email":
            if len(message.text) > 50 or "@" not in message.text:
                try:
                    await message.reply("–ü–æ—á—Ç–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª '@' –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤!")
                except Exception as error:
                    logger.debug(f"{error}: id {id} (user didn't get valid email message)")

            else:
                try:
                    bd.set_email(id, message.text)
                except Exception as error:
                    logger.debug(f"{error}: id {id} (query set_email didn't work)")
                try:
                    bd.set_reg_status(id, "Verification")
                except Exception as error:
                    logger.debug(f"{error}: id {id} (query set_reg_status didn't work)")

                try:
                    await bot.send_message(
                        id,
                        f"–í–∞—à–µ –∏–º—è: {bd.get_name(id)}\n–í–∞—à–∞ –ø–æ—á—Ç–∞: {bd.get_email(id)}",
                        reply_markup=btn.verification_keyboard
                    )
                except Exception as error:
                    logger.debug(f"{error}: id {id} (user didn't get verification message where showing his data)")

        elif bd.check_reg_status(id) == "Verification" and message.text == '–î–∞ ‚úÖ':
            try:
                bd.set_reg_status(id, "Registered")
            except Exception as error:
                logger.debug(f"{error}: id {id} (query set_reg_status didn't work)")

            try:
                await bot.send_message(id, reg_answer, parse_mode="Markdown", reply_markup=btn.menu_keyboard)
            except Exception as error:
                logger.debug(f"{error}: id {id} (user didn't get message after registration and accept his data)")

        elif bd.check_reg_status(id) == "Verification" and message.text == '–ù–µ—Ç ‚ùå':
            try:
                bd.set_reg_status(id, "Not registered")
            except Exception as error:
                logger.debug(f"{error}: id {id} (query set_reg_status didn't work)")

            try:
                await bot.send_message(
                    id,
                    f"–ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'",
                    reply_markup=btn.menu_keyboard
                )
            except Exception as error:
                logger.debug(f"{error}: id {id} (user didn't get message after registration and don't accept his data)")

        elif bd.check_reg_status(id) == "Registered" and message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ‚úç':
            try:
                bd.set_reg_status(id, "Set name")
            except Exception as error:
                logger.debug(f"{error}: id {id} (query set_reg_status didn't work)")

            try:
                await bot.send_message(id, f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º")
            except Exception as error:
                logger.debug(f"{error}: id {id} (user couldn't change data after registration (set name))")

        elif bd.check_reg_status(id) == "Registered" and message.text == '–û—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚úã':
            try:
                await bot.send_message(id, f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π", reply_markup=btn.menu_keyboard)
            except Exception as error:
                logger.debug(f"{error}: id {id} (user didn't get message after reject to change his data)")

        """
        ================================
        ==        QUIZ HANDLER        ==
        ================================
        """

        if message.text == "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ üéÆ" and bd.check_reg_status(id) != "Registered":
            try:
                await bot.send_message(id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", reply_markup=btn.menu_keyboard)
            except Exception as error:
                logger.debug(f"{error}: id {id} (user didn't get message about need to registration before quiz)")

        elif message.text == "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ üéÆ" and bd.check_reg_status(id) == "Registered":
            try:
                bd.set_quiz_score(id, "-1, 0, 0")
            except Exception as error:
                logger.debug(f"{error}: id {id} (query set_quiz_score didn't work)")

            try:
                await quiz(id)
            except Exception as error:
                logger.debug(f"{error}: id {id} (quiz hasn't start)")

        """
        ================================
        ==       PRICE HANDLER        ==
        ================================
        """

        if message.text == "–¶–µ–Ω—ã üí∞":
            pictures = os.listdir('price_pictures')
            media = types.MediaGroup()
            for picture in pictures:
                media.attach_photo(types.InputFile(f"price_pictures/{picture}"), picture)
            try:
                await bot.send_message(id, f"–ó–∞–≥—Ä—É–∂–∞—é...")
                await bot.send_media_group(id, media=media)
            except Exception as error:
                logger.debug(f"{error}: id {id} (user didn't get price pictures)")

    except Exception as error:
        logger.debug(f"{error}: id {id} (problem with bd queries check_reg_status into message_handler)")


async def quiz(id, answer=None):
    start_answer = (
        f"‚ùì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 11 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚ùì\n"
        f"–ü—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫ —Ö–æ—Ä–æ—à–æ –≤—ã –∑–Ω–∞–∫–æ–º—ã —Å —Ç–∞—Ä–æ?"
    )

    if answer is None:
        try:
            msg = await bot.send_poll(
                        id,
                        start_answer,
                        ['–ù–∞—á–∞—Ç—å ‚úÖ', '–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå'],
                        type='quiz',
                        correct_option_id=0,
                        is_anonymous=False
                    )
        except Exception as error:
            logger.debug(f"{error}: id {id} (didn't send first quiz question)")

        try:
            bd.set_quiz_status(id, msg.poll.id)
        except Exception as error:
            logger.debug(f"{error}: id {id} (query set_quiz_status didn't work)")

    else:
        try:
            msg = await bot.send_poll(
                id,
                answer,
                qz.get_questions(answer),
                type='quiz',
                correct_option_id=qz.get_correct_question(answer),
                is_anonymous=False
            )
        except Exception as error:
            logger.debug(f"{error}: id {id} (didn't send next quiz question)")

        try:
            bd.set_quiz_status(id, msg.poll.id)
        except Exception as error:
            logger.debug(f"{error}: id {id} (query set_quiz_status didn't work)")


@dp.poll_answer_handler()
async def poll_answer_handler(quiz_answer: types.PollAnswer):
    id = quiz_answer.user.id
    poll_id = quiz_answer.poll_id

    try:
        if poll_id == bd.get_quiz_status(id):

            quiz_stage, quiz_score, correct_answer = bd.get_quiz_score(id).split(', ')
            quiz_stage, quiz_score, correct_answer = int(quiz_stage), int(quiz_score), int(correct_answer)

            if quiz_stage < 10:

                if quiz_stage == -1 and quiz_answer.option_ids[0] == correct_answer:
                    answers = qz.shuffle_answers()
                    try:
                        bd.set_quiz_answers(id, '#'.join(answers))
                    except Exception as error:
                        logger.debug(f"{error}: id {id} (query set_quiz_answers didn't work)")

                    quiz_stage += 1
                    correct_answer = qz.get_correct_question(answers[quiz_stage])
                    try:
                        bd.set_quiz_score(id, f"{quiz_stage}, {quiz_score}, {correct_answer}")
                    except Exception as error:
                        logger.debug(f"{error}: id {id} (query set_quiz_score didn't work)")

                    try:
                        await quiz(id, answers[quiz_stage])
                    except Exception as error:
                        logger.debug(f"{error}: id {id} (didn't send first quiz question)")

                elif quiz_stage == -1 and quiz_answer.option_ids[0] != correct_answer:
                    try:
                        bd.set_quiz_status(id, "Cancelled")
                    except Exception as error:
                        logger.debug(f"{error}: id {id} (query set_quiz_status didn't work)")

                    try:
                        await bot.send_message(id, "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!", reply_markup=btn.menu_keyboard)
                    except Exception as error:
                        logger.debug(f"{error}: id {id} (user didn't get message after reject quiz)")

                else:
                    if quiz_answer.option_ids[0] == correct_answer:
                        quiz_score += 1

                    quiz_stage += 1
                    answers = bd.get_quiz_answers(id).split('#')
                    next_answer = answers[quiz_stage]
                    correct_answer = qz.get_correct_question(next_answer)
                    try:
                        bd.set_quiz_score(id, f"{quiz_stage}, {quiz_score}, {correct_answer}")
                    except Exception as error:
                        logger.debug(f"{error}: id {id} (query set_quiz_score didn't work)")

                    try:
                        await quiz(id, next_answer)
                    except Exception as error:
                        logger.debug(f"{error}: id {id} (didn't send next quiz question)")

            else:
                try:
                    await bot.send_message(
                        id,
                        f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! üëè\n"
                        f"–í–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ {quiz_score} –∏–∑ 11",
                        reply_markup=btn.menu_keyboard
                    )
                except Exception as error:
                    logger.debug(f"{error}: id {id} (user didn't get congrats message after quiz)")

                try:
                    bd.set_quiz_status(id, "Cancelled")
                except Exception as error:
                    logger.debug(f"{error}: id {id} (query set_quiz_status didn't work)")

    except Exception as error:
        logger.debug(f"{error}: id {id} (queries get_quiz_status into func poll_message_handler didn't work)")


async def reminder():
    try:
        users_ids = bd.get_users_ids()
    except Exception as error:
        logger.debug(f"{error}: (query get_users_ids didn't work)")

    days_left = dt.days_left()

    for id in users_ids:
        if id[0]:
            if days_left == "1 –¥–µ–Ω—å":
                try:
                    await bot.send_message(id[0], f"‚ùó –î–æ –≤–µ–±–∏–Ω–∞—Ä–∞ –æ—Å—Ç–∞–ª—Å—è {days_left} ‚ùó")
                    await asyncio.sleep(0.05)
                except Exception as error:
                    logger.debug(f"{error}: id {id[0]} (user didn't get remind message)")
            elif days_left:
                try:
                    await bot.send_message(id[0], f"‚ùó –î–æ –≤–µ–±–∏–Ω–∞—Ä–∞ –æ—Å—Ç–∞–ª–æ—Å—å {days_left} ‚ùó")
                    await asyncio.sleep(0.05)
                except Exception as error:
                    logger.debug(f"{error}: id {id[0]} (user didn't get remind message)")
            else:
                try:
                    await bot.send_message(id[0], f"‚ùó –í–µ–±–∏–Ω–∞—Ä —É–∂–µ —Å–µ–≥–æ–¥–Ω—è, –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏ ‚ùó")
                    await asyncio.sleep(0.05)
                except Exception as error:
                    logger.debug(f"{error}: id {id[0]} (user didn't get today remind message)")


async def news_place():
    try:
        users_ids = bd.get_users_ids()
    except Exception as error:
        logger.debug(f"{error}: (query get_users_ids didn't work)")

    news_message = (
        f"–ó–¥–µ—Å—å –±—É–¥—É—Ç —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"
    )

    for id in users_ids:
        if id[0]:
            try:
                await bot.send_message(id[0], news_message, parse_mode="Markdown")
                await asyncio.sleep(0.05)
            except Exception as error:
                logger.debug(f"{error}: id {id[0]} (user didn't get news message)")


if __name__ == '__main__':
    scheduler.add_job(
        reminder,
        'interval',
        hours=24, start_date='2023-03-20 12:00:00',
        end_date=WEBINAR_DATE,
        timezone='Europe/Moscow'
    )

    # scheduler.add_job(
    #     news_place,
    #     'date',
    #     run_date=datetime(2023, 3, 23, 16),
    #     timezone='Europe/Moscow'
    # )

    scheduler.start()
    executor.start_polling(dp, skip_updates=True)
