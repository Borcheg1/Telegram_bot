"""
–¢–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç, —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–≤–∏–∑–æ–º, —Ä–∞—Å—Å—ã–ª–∫–æ–π –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏
–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –æ–± –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏. –¢–∞–∫ –∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –≥—Ä–∞—Ñ–∏–∫—É.

–í –¥–µ—Ä–∏–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø–∞–ø–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º 'price_pictures',
–≤ –∫–æ—Ç–æ—Ä–æ–π –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–µ –±–æ–ª–µ–µ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ 'jpeg', 'jpg', 'png'.
–í –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ª–∏—à–Ω–∏—Ö –∑–Ω–∞–∫–æ–≤ '.'
–ü—Ä–∏ –≤–≤–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–º–∞–Ω–¥—ã '–¶–µ–Ω—ã üí∞', –µ–º—É –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —ç—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
"""

import asyncio
from datetime import datetime
import os

from aiogram import Bot, Dispatcher, executor, filters, types
from dotenv import load_dotenv
from loguru import logger
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from database import DataBasePostgres
import buttons as btn
from quizdata import Quiz
from dates import Date


# —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–æ–¥, –º–µ—Å—è—Ü, –¥–µ–Ω—å, —á–∞—Å, –º–∏–Ω—É—Ç–∞
# –Ω–∞–ø—Ä–∏–º–µ—Ä WEBINAR_DATE = datetime.strptime("2023 3 20 16:15", "%Y %m %d %H:%M")
WEBINAR_DATE = datetime.strptime("2023 3 28 20:00", "%Y %m %d %H:%M")
load_dotenv()

scheduler = AsyncIOScheduler()

logger.add(
    "log",
    format='{time} {level} {message}',
    level='DEBUG',
    rotation='1 week',
    compression='zip'
)

bot = Bot(os.environ["TOKEN"])
dp = Dispatcher(bot)

bd = DataBasePostgres()
bd.create_table()

qz = Quiz()

dt = Date(WEBINAR_DATE)


@dp.message_handler(commands="start")
async def start(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã '/start'.

    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π '/start'.

    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î (—Å—Ç–æ–ª–±–µ—Ü user_id), —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ç—É–¥–∞ –µ–≥–æ ID.


    :param message: types.Message
    :return: None
    """

    id = message.from_id
    answer = (
        f"*–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!* üå∏\n\n"
        f"–†–∞–¥–∞ –≤–∞—à–µ–º—É –∏–Ω—Ç–µ—Ä–µ—Å—É –∫ –¢–∞—Ä–æ! –ü—Ä–∏–≥–ª–∞—à–∞—é –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–µ–±–∏–Ω–∞—Ä ¬´–û–±—É—á–µ–Ω–∏–µ –¢–∞—Ä–æ. –°–∏—Å—Ç–µ–º–∞ –†–∞–π–¥–µ—Ä–∞ –£—ç–π—Ç–∞¬ª.\n\n"
        f"*–í–µ–±–∏–Ω–∞—Ä —Å–æ—Å—Ç–æ–∏—Ç—Å—è {dt.get_webinar_date()} –ø–æ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏*\n"
        f"_–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –µ–≥–æ –Ω–∞—á–∞–ª–∞_\n\n"
        f"–ù–∞ –≤–µ–±–∏–Ω–∞—Ä–µ —è —Ä–∞—Å—Å–∫–∞–∂—É:\n"
        f"‚Ä¢ –≤—ã–±–æ—Ä –∫–æ–ª–æ–¥—ã üé¥\n"
        f"‚Ä¢ –æ—Ç–ª–∏—á–∏–µ —Å–∏—Å—Ç–µ–º —Ç–∞—Ä–æ –∏ –∫–æ–ª–æ–¥ üßê\n"
        f"‚Ä¢ –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —á–∏—Å—Ç–∏—Ç—å –∫–æ–ª–æ–¥—ã üî•\n"
        f"‚Ä¢ –∫–∞–∫ –≤–µ—Ä–Ω–æ —á–∏—Ç–∞—Ç—å –∫–∞—Ä—Ç—ã  üìñ\n"
        f"‚Ä¢ –∑–∞—á–µ–º –Ω—É–∂–Ω—ã –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã–µ –∫–∞—Ä—Ç—ã –∏ –Ω—É–∂–Ω—ã –ª–∏? üåö\n"
        f"‚Ä¢ –≥–¥–µ –∏—Å–∫–∞—Ç—å –ø–µ—Ä–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ üí∞\n"
        f"‚Ä¢ –ø–æ–¥–µ–ª—é—Å—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –Ω–∞—Ä–∞–±–æ—Ç–∫–∞–º–∏ üßô\n"
        f"‚Ä¢ –ø—Ä–æ–≤–µ–¥—ë–º –º–µ–¥–∏—Ç–∞—Ü–∏—é –Ω–∞ –ê—Ä–∫–∞–Ω —Ç–∞—Ä–æ üßò‚Äç‚ôÄÔ∏è\n\n"
        f"–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —Å–∏—Å—Ç–µ–º–∞ –£—ç–π—Ç–∞?\n"
        f"–î–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —è–≤–ª—è–µ—Ç—Å—è –∫–ª–∞—Å—Å–∏–∫–æ–π –∏ –æ–±—É—á–∏–≤—à–∏—Å—å –Ω–∞ —ç—Ç–æ–π –∫–æ–ª–æ–¥–µ, "
        f"–≤–∞–º –±—É–¥–µ—Ç –ª–µ–≥–∫–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∫–æ–ª–æ–¥–∞–º–∏.\n\n"
        f"–°—Ç–∞–≤—å –±—É–¥–∏–ª—å–Ω–∏–∫ ‚è∞ –∏ –≥–æ—Ç–æ–≤—å—Å—è –∫–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚úçÔ∏è, "
        f"–±—É–¥–µ—Ç –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω–æ–≥–æ! –î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä–µ! üå∑\n\n"
        f"–î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –ø–∏—à–∏—Ç–µ –ø–æ –ª—é–±–æ–º—É –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:\n\n"
        f"[Instagram](https://example.com)\n\n"
        f"[Telegram](https://t.me/test_borcheg_bot)\n\n"
    )

    if not bd.check_user_exist(id):
        try:
            bd.add_user(id)
        except Exception as error:
            logger.debug(f"{error}: id {id} (query add_user didn't work)")

    try:
        await bot.send_message(id, answer, parse_mode="Markdown", reply_markup=btn.menu_keyboard)
    except Exception as error:
        logger.debug(f"{error}: id {id} (user didn't get start message)")


@dp.message_handler(filters.Regexp(regexp=r'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üéì'))
async def registration_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üéì'.

    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (—Å—Ç–æ–ª–±–µ—Ü reg_status).

    –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'Registered', –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö.

    –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ 'Registered', –º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞ 'Set name' –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–≤–µ—Å—Ç–∏ –∏–º—è.


    :param message: types.Message
    :return: None
    """

    id = message.from_id

    try:
        if bd.check_reg_status(id) == "Registered":
            try:
                await bot.send_message(
                    id,
                    f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –∏–º–µ–Ω–µ–º {bd.get_name(id)}\n–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ?",
                    reply_markup=btn.change_reg_keyboard
                )
            except Exception as error:
                logger.debug(f"{error}: id {id} (user couldn't change his reg data)")

        else:
            try:
                bd.set_reg_status(id, "Set name")
            except Exception as error:
                logger.debug(f"{error}: id {id} (set_name query didn't work)")

            try:
                await bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º", reply_markup=types.ReplyKeyboardRemove())
            except Exception as error:
                logger.debug(f"{error}: id {id} (user couldn't set name)")

    except Exception as error:
        logger.debug(f"{error}: id {id} (check_reg_status query didn't work)")


@dp.message_handler(filters.Regexp(regexp=r'–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ üéÆ'))
async def quiz_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ üéÆ'.

    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (—Å—Ç–æ–ª–±–µ—Ü reg_status).

    –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ 'Registered', –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    –ø–µ—Ä–µ–¥ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.

    –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'Registered', –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã (—Å—Ç–æ–ª–±–µ—Ü quiz_score –≤ –ë–î)
    –¥–æ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é quiz().


    :param message: types.Message
    :return: None
    """

    id = message.from_id

    try:
        if bd.check_reg_status(id) != "Registered":
            try:
                await bot.send_message(id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", reply_markup=btn.menu_keyboard)
            except Exception as error:
                logger.debug(f"{error}: id {id} (user didn't get message about need to registration before quiz)")

        elif bd.check_reg_status(id) == "Registered":
            try:
                bd.set_quiz_score(id, "-1, 0, 0")
            except Exception as error:
                logger.debug(f"{error}: id {id} (query set_quiz_score didn't work)")

            try:
                await quiz(id)
            except Exception as error:
                logger.debug(f"{error}: id {id} (quiz hasn't start)")

    except Exception as error:
        logger.debug(f"{error}: id {id} (problem with bd queries check_reg_status into quiz_handler)")


@dp.message_handler(filters.Regexp(regexp=r'–¶–µ–Ω—ã üí∞'))
async def price_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã '–¶–µ–Ω—ã üí∞'.

    –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ 'price_pictures', –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ 'jpeg', 'jpg', 'png',
    –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –≥—Ä—É–ø–ø—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π MediaGroup –¥–æ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

    –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ '–ó–∞–≥—Ä—É–∂–∞—é...' –∏ —Å–ª–µ–¥–æ–º –≥—Ä—É–ø–ø—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.


    :param message: types.Message
    :return: None
    """

    id = message.from_id
    pictures = os.listdir('price_pictures')
    media = types.MediaGroup()
    for idx, picture in enumerate(pictures):
        if len(picture.split('.')) == 2 and picture.split('.')[1].lower() in ('jpeg', 'jpg', 'png') and idx < 10:
            media.attach_photo(types.InputFile(f"price_pictures/{picture}"), picture)
    try:
        await bot.send_message(id, f"–ó–∞–≥—Ä—É–∂–∞—é...")
        await bot.send_media_group(id, media=media)
    except Exception as error:
        logger.debug(f"{error}: id {id} (user didn't get price pictures)")


@dp.message_handler(filters.Regexp(regexp=r'–£–¥–∞–ª–µ–Ω–∏–µ ‚õî'))
async def delete_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã '–£–¥–∞–ª–µ–Ω–∏–µ ‚õî'.

    –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 'Deleting' (—Å—Ç–æ–ª–±–µ—Ü del_status –≤ –ë–î).

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∞–∫–º–∏ '–î–∞ ‚úÖ', '–ù–µ—Ç ‚ùå'.


    :param message: types.Message
    :return: None
    """

    id = message.from_id
    try:
        bd.set_del_status(id, "Deleting")
    except Exception as error:
        logger.debug(f"{error}: id {id} (query set_del_status didn't work)")

    try:
        await bot.send_message(
            id,
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç –º–µ–Ω—è —Å–æ–æ–±—â–µ–Ω–∏—è?",
            reply_markup=btn.yes_no_keyboard
        )

    except Exception as error:
        logger.debug(f"{error}: id {id} (user didn't get message about delete his id)")


async def quiz(id, question=None):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä question: str (–ø–æ —É–º–∞–ª—á–∞–Ω–∏—é None) —Å –≤–æ–ø—Ä–æ—Å–æ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.

    –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä question —Ä–∞–≤–µ–Ω None, —Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å 'start_question' –æ –Ω–∞—á–∞–ª–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    —Å –æ—Ç–≤–µ—Ç–∞–º–∏ '–ù–∞—á–∞—Ç—å ‚úÖ', '–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå'.

    –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä question –Ω–µ —Ä–∞–≤–µ–Ω None, —Ç–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —ç—Ç–∞–ø –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    —Å –≤–æ–ø—Ä–æ—Å–æ–º question.

    –ú–µ–Ω—è–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ ID –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã (—Å—Ç–æ–ª–±–µ—Ü quiz_status –≤ –ë–î).

    –í–æ–ø—Ä–æ—Å—ã, –æ—Ç–≤–µ—Ç—ã –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –±–µ—Ä—É—Ç—Å—è –∏–∑ –º–æ–¥—É–ª—è quizdata, –∫–ª–∞—Å—Å–∞ Quiz.


    :param question: str, –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    :return: None
    """

    start_question = (
        f"‚ùì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ {len(qz.quiz_data)} –≤–æ–ø—Ä–æ—Å–æ–≤ ‚ùì\n"
        f"–ü—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫ —Ö–æ—Ä–æ—à–æ –≤—ã –∑–Ω–∞–∫–æ–º—ã —Å —Ç–∞—Ä–æ?"
    )

    if question is None:
        try:
            msg = await bot.send_poll(
                        id,
                        start_question,
                        ['–ù–∞—á–∞—Ç—å ‚úÖ', '–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå'],
                        type='quiz',
                        correct_option_id=0,
                        is_anonymous=False
                    )
        except Exception as error:
            logger.debug(f"{error}: id {id} (didn't send first quiz question)")

        try:
            bd.set_quiz_status(id, msg.poll.id)
        except Exception as error:
            logger.debug(f"{error}: id {id} (query set_quiz_status didn't work)")

    else:
        try:
            msg = await bot.send_poll(
                id,
                question,
                qz.get_answers(question),
                type='quiz',
                correct_option_id=qz.get_correct_question(question),
                is_anonymous=False
            )
        except Exception as error:
            logger.debug(f"{error}: id {id} (didn't send next quiz question)")

        try:
            bd.set_quiz_status(id, msg.poll.id)
        except Exception as error:
            logger.debug(f"{error}: id {id} (query set_quiz_status didn't work)")


@dp.poll_answer_handler()
async def poll_answer_handler(quiz_question: types.PollAnswer):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.

    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å —Å—á–µ—Ç–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã (—Å—Ç–æ–ª–±–µ—Ü quiz_score –≤ –ë–î),
    –µ—Å–ª–∏ quiz_stage —Ä–∞–≤–Ω—è–µ—Ç—Å—è -1, —Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.

    –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π, —Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å—Ç–æ–ª–±–µ—Ü quiz_questions).

    –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π, —Ç–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è
    –∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å 'Cancelled' (—Å—Ç–æ–ª–±–µ—Ü quiz_status).

    –ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.


    :param quiz_question: types.PollAnswer
    :return: None
    """

    id = quiz_question.user.id
    poll_id = quiz_question.poll_id

    try:
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if poll_id == bd.get_quiz_status(id):

            # –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏–∑ –±–¥
            # quiz_stage: str, —ç—Ç–∞–ø –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã (–ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞). –ü—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–∏ -1 –≤—ã–¥–∞–µ—Ç—Å—è —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
            # quiz_score: str, —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            # correct_answer: str, –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            quiz_stage, quiz_score, correct_answer = bd.get_quiz_score(id).split(', ')
            quiz_stage, quiz_score, correct_answer = int(quiz_stage), int(quiz_score), int(correct_answer)

            # –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
            if quiz_stage < len(qz.quiz_data) - 1:

                # –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π, —Ç–æ –≤–æ–ø—Ä–æ—Å—ã —Ä–∞–Ω–¥–æ–º–Ω–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞—é—Ç—Å—è
                # –∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—Å—Ç–æ–ª–±–µ—Ü quiz_questions)
                if quiz_stage == -1 and quiz_question.option_ids[0] == correct_answer:
                    questions = qz.shuffle_questions()
                    try:
                        bd.set_quiz_questions(id, questions)
                    except Exception as error:
                        logger.debug(f"{error}: id {id} (query set_quiz_questions didn't work)")

                    # —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞, –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    # –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –≤ –ë–î (—Å—Ç–æ–ª–±–µ—Ü quiz_score)
                    quiz_stage += 1
                    correct_answer = qz.get_correct_question(questions[quiz_stage])
                    try:
                        bd.set_quiz_score(id, f"{quiz_stage}, {quiz_score}, {correct_answer}")
                    except Exception as error:
                        logger.debug(f"{error}: id {id} (query set_quiz_score didn't work)")

                    # –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ quiz —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                    try:
                        await quiz(id, questions[quiz_stage])
                    except Exception as error:
                        logger.debug(f"{error}: id {id} (didn't send first quiz question)")

                # –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π, —Ç–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è
                # –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –≤ –ë–î –Ω–∞ 'Cancelled' (—Å—Ç–æ–ª–±–µ—Ü quiz_status)
                elif quiz_stage == -1 and quiz_question.option_ids[0] != correct_answer:
                    try:
                        bd.set_quiz_status(id, "Cancelled")
                    except Exception as error:
                        logger.debug(f"{error}: id {id} (query set_quiz_status didn't work)")

                    try:
                        await bot.send_message(id, "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!", reply_markup=btn.menu_keyboard)
                    except Exception as error:
                        logger.debug(f"{error}: id {id} (user didn't get message after reject quiz)")

                # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
                else:
                    if quiz_question.option_ids[0] == correct_answer:
                        quiz_score += 1

                    # –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (PostgreSQL –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–Ω–¥–µ–∫—Å —Å 1)
                    # –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –≤ –ë–î
                    # –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ quiz —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                    quiz_stage += 1
                    next_question = bd.get_quiz_questions(id, quiz_stage + 1)
                    correct_answer = qz.get_correct_question(next_question)
                    try:
                        bd.set_quiz_score(id, f"{quiz_stage}, {quiz_score}, {correct_answer}")
                    except Exception as error:
                        logger.debug(f"{error}: id {id} (query set_quiz_score didn't work)")

                    try:
                        await quiz(id, next_question)
                    except Exception as error:
                        logger.debug(f"{error}: id {id} (didn't send next quiz question)")

            # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
            else:
                if quiz_question.option_ids[0] == correct_answer:
                    quiz_score += 1
                try:
                    await bot.send_message(
                        id,
                        f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! üëè\n"
                        f"–í–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ {quiz_score} –∏–∑ 11",
                        reply_markup=btn.menu_keyboard
                    )
                except Exception as error:
                    logger.debug(f"{error}: id {id} (user didn't get congrats message after quiz)")

                try:
                    bd.set_quiz_status(id, "Cancelled")
                except Exception as error:
                    logger.debug(f"{error}: id {id} (query set_quiz_status didn't work)")

    except Exception as error:
        logger.debug(f"{error}: id {id} (queries get_quiz_status into func poll_message_handler didn't work)")


async def reminder():
    """
    –§—É–Ω–∫—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–µ–±–∏–Ω–∞—Ä–µ.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥—É–ª—å dates, –∫–ª–∞—Å—Å Date.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Å—Ç–æ–ª–±–µ—Ü user_id) —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –¥–Ω–µ–π –¥–æ –Ω–∞—á–∞–ª–∞ –≤–µ–±–∏–Ω–∞—Ä–∞.


    :return: None
    """

    try:
        users_ids = bd.get_users_ids()
    except Exception as error:
        logger.debug(f"{error}: (query get_users_ids didn't work)")

    days_left = dt.days_left()

    for id in users_ids:
        if id[0]:
            if days_left == "1 –¥–µ–Ω—å":
                try:
                    await bot.send_message(id[0], f"‚ùó –î–æ –≤–µ–±–∏–Ω–∞—Ä–∞ –æ—Å—Ç–∞–ª—Å—è {days_left} ‚ùó")
                    await asyncio.sleep(0.05)
                except Exception as error:
                    logger.debug(f"{error}: id {id[0]} (user didn't get remind message)")
            elif days_left:
                try:
                    await bot.send_message(id[0], f"‚ùó –î–æ –≤–µ–±–∏–Ω–∞—Ä–∞ –æ—Å—Ç–∞–ª–æ—Å—å {days_left} ‚ùó")
                    await asyncio.sleep(0.05)
                except Exception as error:
                    logger.debug(f"{error}: id {id[0]} (user didn't get remind message)")
            else:
                try:
                    await bot.send_message(id[0], f"‚ùó –í–µ–±–∏–Ω–∞—Ä —É–∂–µ —Å–µ–≥–æ–¥–Ω—è, –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏ ‚ùó")
                    await asyncio.sleep(0.05)
                except Exception as error:
                    logger.debug(f"{error}: id {id[0]} (user didn't get today remind message)")


async def news_place():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Å—Ç–æ–ª–±–µ—Ü user_id) —Å–æ–æ–±—â–µ–Ω–∏–µ.


    :return: None
    """

    try:
        users_ids = bd.get_users_ids()
    except Exception as error:
        logger.debug(f"{error}: (query get_users_ids didn't work)")

    news_message = (
        f"–ó–¥–µ—Å—å –±—É–¥—É—Ç —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"
    )

    for id in users_ids:
        if id[0]:
            try:
                await bot.send_message(id[0], news_message, parse_mode="Markdown")
                await asyncio.sleep(0.05)
            except Exception as error:
                logger.debug(f"{error}: id {id[0]} (user didn't get news message)")


@dp.message_handler()
async def message_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π
    '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üéì', '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ üéÆ', '–¶–µ–Ω—ã üí∞', '–£–¥–∞–ª–µ–Ω–∏–µ ‚õî'.




    :param message: types.Message
    :return: None
    """

    id = message.from_id
    reg_answer = (
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä! üëç\n"
        f"–ñ–¥—É —Ç–µ–±—è {dt.get_webinar_date()}!\n"
        f"_–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç –∏ –Ω–∞ –ø–æ—á—Ç—É –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –µ–≥–æ –Ω–∞—á–∞–ª–∞, –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏!_"
    )

    """
    ================================
    ==    REGISTRATION HANDLER    ==
    ================================
    """

    try:
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'Set name' (—Å—Ç–æ–ª–±–µ—Ü reg_status), —Ç–æ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
        # –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥–Ω—ã—Ö, –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç–æ–ª–±–µ—Ü name).
        # –ó–∞—Ç–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ 'Set email'.
        if bd.check_reg_status(id) == "Set name":
            if len(message.text) > 50:
                try:
                    await message.reply("–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤!")
                except Exception as error:
                    logger.debug(f"{error}: id {id} (user didn't get valid set name message)")

            else:
                try:
                    bd.set_name(id, message.text)
                except Exception as error:
                    logger.debug(f"{error}: id {id} (query set_name didn't work)")

                try:
                    bd.set_reg_status(id, "Set email")
                except Exception as error:
                    logger.debug(f"{error}: id {id} (query set_reg_status didn't work)")

                try:
                    await bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É")
                except Exception as error:
                    logger.debug(f"{error}: id {id} (user couldn't set email)")

        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'Set email' (—Å—Ç–æ–ª–±–µ—Ü reg_status), —Ç–æ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
        # –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥–Ω—ã—Ö, –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –ø–æ—á—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç–æ–ª–±–µ—Ü email).
        # –ó–∞—Ç–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ 'Verification' –∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø—Ä–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∏–º–µ–Ω–∏ –∏ –ø–æ—á—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        elif bd.check_reg_status(id) == "Set email":
            if len(message.text) > 50 or "@" not in message.text:
                try:
                    await message.reply("–ü–æ—á—Ç–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª '@' –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤!")
                except Exception as error:
                    logger.debug(f"{error}: id {id} (user didn't get valid email message)")

            else:
                try:
                    bd.set_email(id, message.text)
                except Exception as error:
                    logger.debug(f"{error}: id {id} (query set_email didn't work)")
                try:
                    bd.set_reg_status(id, "Verification")
                except Exception as error:
                    logger.debug(f"{error}: id {id} (query set_reg_status didn't work)")

                try:
                    await bot.send_message(
                        id,
                        f"–í–∞—à–µ –∏–º—è: {bd.get_name(id)}\n–í–∞—à–∞ –ø–æ—á—Ç–∞: {bd.get_email(id)}",
                        reply_markup=btn.yes_no_keyboard
                    )
                except Exception as error:
                    logger.debug(f"{error}: id {id} (user didn't get verification message where showing his data)")

        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'Verification' (—Å—Ç–æ–ª–±–µ—Ü reg_status) –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ '–î–∞ ‚úÖ', —Ç–æ
        # —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ 'Registered'
        elif bd.check_reg_status(id) == "Verification" and message.text == '–î–∞ ‚úÖ':
            try:
                bd.set_reg_status(id, "Registered")
            except Exception as error:
                logger.debug(f"{error}: id {id} (query set_reg_status didn't work)")

            try:
                await bot.send_message(id, reg_answer, parse_mode="Markdown", reply_markup=btn.menu_keyboard)
            except Exception as error:
                logger.debug(f"{error}: id {id} (user didn't get message after registration and accept his data)")

        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'Verification' (—Å—Ç–æ–ª–±–µ—Ü reg_status) –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ '–ù–µ—Ç ‚ùå', —Ç–æ
        # —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ 'Not registered' –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
        elif bd.check_reg_status(id) == "Verification" and message.text == '–ù–µ—Ç ‚ùå':
            try:
                bd.set_reg_status(id, "Not registered")
            except Exception as error:
                logger.debug(f"{error}: id {id} (query set_reg_status didn't work)")

            try:
                await bot.send_message(
                    id,
                    f"–ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'",
                    reply_markup=btn.menu_keyboard
                )
            except Exception as error:
                logger.debug(f"{error}: id {id} (user didn't get message after registration and don't accept his data)")

        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'Registered' (—Å—Ç–æ–ª–±–µ—Ü reg_status) –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ‚úç', —Ç–æ
        # —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ 'Set name' –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –≤–≤–µ—Å—Ç–∏ –∏–º—è.
        elif bd.check_reg_status(id) == "Registered" and message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ‚úç':
            try:
                bd.set_reg_status(id, "Set name")
            except Exception as error:
                logger.debug(f"{error}: id {id} (query set_reg_status didn't work)")

            try:
                await bot.send_message(id, f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º")
            except Exception as error:
                logger.debug(f"{error}: id {id} (user couldn't change data after registration (set name))")

        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'Registered' (—Å—Ç–æ–ª–±–µ—Ü reg_status)
        # –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ '–û—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚úã', —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
        elif bd.check_reg_status(id) == "Registered" and message.text == '–û—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚úã':
            try:
                await bot.send_message(id, f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π", reply_markup=btn.menu_keyboard)
            except Exception as error:
                logger.debug(f"{error}: id {id} (user didn't get message after reject to change his data)")

    except Exception as error:
        logger.debug(f"{error}: id {id} (problem with bd queries check_reg_status into message_handler)")

    """
    ==========================
    ==    DELETE HANDLER    ==
    ==========================
    """

    try:
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'Deleting' (—Å—Ç–æ–ª–±–µ—Ü del_status) –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ '–î–∞ ‚úÖ', —Ç–æ
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–æ–±–Ω–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏ —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        if bd.check_del_status(id) == "Deleting" and message.text == "–î–∞ ‚úÖ":
            try:
                await bot.send_message(
                    id,
                    "–ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É '/start'",
                    reply_markup=btn.start_keyboard
                )
            except Exception as error:
                logger.debug(f"{error}: id {id} (user didn't get message after accept deliting)")

            await asyncio.sleep(0.5)

            try:
                bd.delete_user(id)
            except Exception as error:
                logger.debug(f"{error}: id {id} (query delete_user didn't work; user wasn't delete from bd)")

        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'Deleting' (—Å—Ç–æ–ª–±–µ—Ü del_status) –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ '–ù–µ—Ç ‚ùå', —Ç–æ
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é –∏ –º–µ–Ω—è–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞ 'Rejected'
        elif bd.check_del_status(id) == "Deleting" and message.text == "–ù–µ—Ç ‚ùå":
            try:
                await bot.send_message(id, "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!", reply_markup=btn.menu_keyboard)
            except Exception as error:
                logger.debug(f"{error}: id {id} (user didn't get message after decline deliting)")

            try:
                bd.set_del_status(id, "Rejected")
            except Exception as error:
                logger.debug(f"{error}: id {id} (query set_del_status didn't work)")

    except Exception as error:
        logger.debug(f"{error}: id {id} (query check_del_status didn't work into message_handler)")


if __name__ == '__main__':
    # —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ reminder
    scheduler.add_job(
        reminder,
        'interval',
        minutes=1, start_date='2023-03-27 15:00:00',
        end_date=WEBINAR_DATE,
        timezone='Europe/Moscow'
    )

    # —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ news_place
    scheduler.add_job(
        news_place,
        'date',
        run_date=datetime(2023, 3, 25, 18, 4),
        timezone='Europe/Moscow'
    )

    scheduler.start()
    executor.start_polling(dp, skip_updates=True)
